{"version":3,"file":"static/js/459.2edcc1f9.chunk.js","mappings":";mJACA,EAAwB,kDCexB,EATc,SAAC,GAA+B,IAAD,IAA5BA,QAAAA,OAA4B,MAAlB,aAAkB,EACzC,OACI,iBAAKC,UAAWC,EAAhB,WACI,SAACC,EAAA,EAAD,UAAKH,KACL,SAACI,EAAA,EAAD,kOCVZ,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA8E,sBC+B9E,MA9BA,SAAqBC,GAAyC,IAApCC,EAAmC,uDAAtB,MAAOC,EAAe,uDAAH,EAEtD,GAA0CC,EAAAA,EAAAA,WAAS,GAAnD,eAAOC,EAAP,KAAuBC,EAAvB,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAIP,EAAIQ,QACRC,EAAW,IAAIC,sBACjB,YAAc,IAAZC,GAAW,eAETN,EAAgBM,EAAMP,kBAE1B,CACIH,WAAAA,EACAC,UAAAA,IAQR,OAJIK,IAAMH,GAAkBK,EAASG,QAAQL,GAE1CH,GAAkBK,EAASI,UAAUN,GAEjC,WAAQE,EAASI,UAAUN,MAEnC,CAACH,IAEGA,YCpBLU,EAAO,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACZC,GAAOC,EAAAA,EAAAA,UACPC,EAAWC,EAAYH,EAAM,MAAO,IAM1C,OAJAX,EAAAA,EAAAA,YAAU,WACNW,EAAKT,QAAQa,MAAMC,OAASL,EAAKT,QAAQe,YAAc,EAAI,OAC5D,KAGC,iBACI3B,UAAWC,EACXG,IAAKiB,EAFT,UAIME,GACE,gBAAKvB,UAAWC,EAAQwB,MAAO,CAACG,gBAAiB,OAASR,EAAO,QADxD,SAACS,EAAA,EAAD,IAGZV,IAAQ,gBAAKnB,UAAWC,EAAhB,SAA4BkB,QAKjD,GAAeW,EAAAA,EAAAA,MAAKZ,GC3BpB,EAAwB,qBAAxB,EAAoD,oBAApD,EAAgF,qBAAhF,EAA4G,oBCGtGa,EAAQ,SAAC,GAMR,IAAD,IALFC,MAAAA,OAKE,MALM,aAKN,MAJFC,MAAAA,OAIE,SAHFC,EAGE,EAHFA,MACAC,EAEE,EAFFA,SACAC,EACE,EADFA,SAEMC,GAAOf,EAAAA,EAAAA,QAAO,MAsBpB,OACI,0BACI,mBAAOtB,UAAWC,EAAlB,WACI,iBAAMD,UAAWC,EAAQG,IAAKiC,EAA9B,SAAqCL,KACrC,kBACIhC,UAAWC,EACXiC,MAAOA,EACPC,SAAUA,EACVG,QA1BhB,SAAuBC,GACnBF,EAAKzB,QAAQa,MAAMe,SAAW,OAC9BH,EAAKzB,QAAQa,MAAMgB,UAAY,wBAC5BR,GACCI,EAAKzB,QAAQa,MAAMiB,MAAQ,eAC3BH,EAAMI,OAAOlB,MAAMmB,OAAS,2BAG3BP,EAAKzB,QAAQa,MAAMiB,MAAQ,iBAC3BH,EAAMI,OAAOlB,MAAMmB,OAAS,6BAkBrBC,OAfhB,WACIR,EAAKzB,QAAQa,MAAMe,SAAW,OAC9BH,EAAKzB,QAAQa,MAAMgB,UAAY,uBAC/BJ,EAAKzB,QAAQa,MAAMiB,MAAQ,wBAcnB,gBAAK1C,UAAWC,EAAhB,SAAyBmC,UAMzC,GAAeN,EAAAA,EAAAA,MAAKC,aCjDpB,EAA0B,uCAA1B,EAAwE,oCAAxE,EAAsH,uCCAtH,EAAyB,2BCWzB,EARmB,SAAC,GAAyB,IAAxBK,EAAuB,EAAvBA,SAAUU,EAAa,EAAbA,QAC3B,OACI,mBAAQ9C,UAAWC,EAAU6C,QAASA,EAAtC,SACKV,eCEPW,EAAwB,WAC1B,IAAMC,GAAU1B,EAAAA,EAAAA,QAAO,MACjB2B,GAAWC,EAAAA,EAAAA,MAOjB,OACI,iBAAKlD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAQ6C,QANhC,SAAqBK,GACjBA,EAAER,OAAOlB,MAAM2B,QAAU,OACzBJ,EAAQpC,QAAQa,MAAM2B,QAAU,SAI5B,UACI,SAAC,MAAD,OAEJ,iBAAKpD,UAAWC,EAAWG,IAAK4C,EAAhC,UAXQ,CAAC,OAAQ,SAAS,SAAU,UAAW,WAAY,SAY9CK,KAAI,SAAA1C,GAAC,OACV,SAAC,EAAD,CAEImC,QAAS,kBAAMG,GAASK,EAAAA,EAAAA,IAAa3C,KAFzC,SAGEA,GAFOA,OAIb,SAAC,EAAD,CAAYmC,QAAS,kBAAMG,GAASK,EAAAA,EAAAA,IAAa,MAAjD,0BAMhB,GAAexB,EAAAA,EAAAA,MAAKiB,GCdpB,MAjBA,WACI,IAAME,GAAWC,EAAAA,EAAAA,MACXK,GAAOC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,gBAAgBH,SAExD7C,EAAAA,EAAAA,YAAU,WAEuBiD,KAAKC,MAAMC,aAAaC,QAAQ,yBAEzDb,GAASc,EAAAA,EAAAA,QAEd,KACHrD,EAAAA,EAAAA,YAAU,WAENmD,aAAaG,QAAQ,sBAAuBL,KAAKM,UAAUV,MAC5D,CAACA,KCkDR,EArDiB,WACb,OAAyBC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,mBAA7CzB,EAAP,EAAOA,MAAOiC,EAAd,EAAcA,QACd,GAA0B3D,EAAAA,EAAAA,UAAS,IAAnC,eAAO2B,EAAP,KAAciC,EAAd,KAEMZ,GAAOC,EAAAA,EAAAA,KAAY,SAAAC,GACrB,MAAyBA,EAAMC,gBAAvBU,EAAR,EAAQA,OAAQb,EAAhB,EAAgBA,KAChB,GAAGA,EAAM,CACL,IAAIc,EAAed,EAMnB,OALGa,IAEAC,EAAgBd,EAAKe,QAAO,SAAAC,GAAC,OAAIA,EAAEH,OAAOI,gBAAkBJ,EAAOI,kBAG9DH,EAAaC,QAAO,qBAAEnD,KAAeqD,cAAcC,SAASvC,EAAMsC,kBAE9E,OAAOjB,KAILpB,GAAWuC,EAAAA,EAAAA,cAAY,SAAAnC,GAAK,OAAI4B,EAAS5B,EAAMI,OAAOT,UAI5D,OAFAyC,KAGI,0BACI,SAACC,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,YACI,iBAAK7E,UAAWC,EAAAA,EAAAA,QAAhB,WACI,SAAC,EAAD,KACA,SAAC,EAAD,CACI+B,MAAM,SACNE,MAAOA,EACPC,SAAUA,EAHd,UAKI,SAAC,MAAD,SAIPF,GAAQ,SAAC6C,EAAA,EAAD,CAAO/E,QAASkC,IACzBiC,GAAU,SAACrC,EAAA,EAAD,CAAQkD,KAAM,WACxB,gBAAK/E,UAAWC,EAAAA,EAAAA,KAAhB,SACKsD,EAAKF,KAAI,SAAC2B,EAASC,GAAV,OACN,SAAC,KAAD,CAAcC,GAAE,mBAAcF,EAAQ7D,MAAtC,UACI,SAAC,EAAD,CAAMA,KAAM6D,EAAQ7D,KAAMC,KAAM4D,EAAQ5D,QADjC6D,oCCzDvC,KAAgB,KAAO,uBAAuB,KAAO,uBAAuB,QAAU","sources":["webpack://contrys/./src/components/error/Error.module.css?96a2","components/error/Error.js","webpack://contrys/./src/components/surfaces/Card.module.css?136e","hooks/useOnScreen.js","components/surfaces/Card.js","webpack://contrys/./src/components/inputs/Input.module.css?69e6","components/inputs/Input.js","webpack://contrys/./src/components/general/FilterCountrysButtons.module.css?0c0d","webpack://contrys/./src/components/general/ButtonText.module.css?a348","components/general/ButtonText.js","components/general/FilterCountrysButtons.js","hooks/useCountrysDataEffects.js","pages/Countrys.js","webpack://contrys/./src/pages/Countrys.module.css?ef01"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Error_error__wOlDu\"};","import React from 'react'\r\n//\r\nimport s from './Error.module.css'\r\n\r\nimport H1 from '../general/H1'\r\nimport P from '../general/P'\r\n\r\nconst Error = ({ message = 'some error'}) => {\r\n    return (\r\n        <div className={s.error}>\r\n            <H1>{message}</H1>\r\n            <P>we're sorry but something went wrong</P>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error\r\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__YpZCd\",\"flag\":\"Card_flag__kGLxY\",\"overley\":\"Card_overley__Fgr9d\"};","import { useState, useEffect } from 'react'\r\n\r\nfunction useOnScreen(ref, rootMargin = \"0px\", threshold = 1) {\r\n    // State and setter for storing whether element is visible\r\n    const [isIntersecting, setIntersecting] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        const r = ref.current //! important save ref for destroy cleanup\r\n        const observer = new IntersectionObserver(\r\n            ([entry]) => {\r\n                // Update our state when observer callback fires\r\n                setIntersecting(entry.isIntersecting)\r\n            },\r\n            {\r\n                rootMargin,\r\n                threshold\r\n            },\r\n        )\r\n        // start observe\r\n        if (r && !isIntersecting) { observer.observe(r) }\r\n        //! cleanup after load content\r\n        if(isIntersecting) { observer.unobserve(r) }\r\n        // cleanup before destroy\r\n        return () => { observer.unobserve(r) }\r\n\r\n    }, [isIntersecting])\r\n\r\n    return isIntersecting\r\n}\r\n\r\n\r\n\r\nexport default useOnScreen","import React, { useRef, useEffect, memo } from 'react'\r\n\r\nimport s from './Card.module.css'\r\n\r\nimport useOnScreen from '../../hooks/useOnScreen'\r\nimport Loader from '../error/Loader'\r\n\r\nconst Card = ({ name, flag }) => {\r\n    const card = useRef()\r\n    const onScreen = useOnScreen(card, '0px', 0.5);\r\n\r\n    useEffect(() => {\r\n        card.current.style.height = card.current.offsetWidth / 2 + 'px'\r\n    }, [])\r\n    \r\n    return (\r\n        <div \r\n            className={s.card}\r\n            ref={card}\r\n        >\r\n            {!onScreen ? <Loader /> :\r\n                <div className={s.flag} style={{backgroundImage: 'url(' + flag + ')' }}></div>\r\n            }\r\n            {name && <div className={s.overley}>{name}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Card)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Input_label__t6ulH\",\"text\":\"Input_text__wIKbT\",\"input\":\"Input_input__yLo77\",\"icon\":\"Input_icon__+ZXOF\"};","import React, { useRef, memo } from 'react'\r\n\r\nimport s from './Input.module.css'\r\n\r\nconst Input = ({\r\n    label = 'text label',\r\n    error = false,\r\n    value,\r\n    onChange,\r\n    children\r\n}) => {\r\n    const text = useRef(null)\r\n\r\n    //! problem with rendering. Always rerender after perent render. I think it's problem with useFilterData hook\r\n\r\n    function focusHandler (event) {\r\n        text.current.style.fontSize = '12px'\r\n        text.current.style.transform = 'translate(10%, -100%)'\r\n        if(error) {\r\n            text.current.style.color = 'var(--error)'\r\n            event.target.style.border = '1px solid var(--error)'\r\n        }\r\n        else {\r\n             text.current.style.color = 'var(--primary)'\r\n             event.target.style.border = '1px solid var(--primary)'\r\n        }\r\n    }\r\n    function blurHandler () {\r\n        text.current.style.fontSize = '18px'\r\n        text.current.style.transform = 'translate(10%, -10%)'\r\n        text.current.style.color = 'var(--text-color)'\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label className={s.label}>\r\n                <span className={s.text} ref={text}>{label}</span>\r\n                <input \r\n                    className={s.input}\r\n                    value={value}\r\n                    onChange={onChange}\r\n                    onFocus={focusHandler}\r\n                    onBlur={blurHandler}\r\n                />\r\n                <div className={s.icon}>{children}</div>\r\n            </label>     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Input)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"FilterCountrysButtons_wrapper__GTMqB\",\"icon\":\"FilterCountrysButtons_icon__PFZgW\",\"buttons\":\"FilterCountrysButtons_buttons__h7aNp\"};","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ButtonText_button__6AjtX\"};","import React from 'react'\r\n\r\nimport s from './ButtonText.module.css'\r\n\r\nconst ButtonText = ({children, onClick}) => {\r\n    return (\r\n        <button className={s.button} onClick={onClick}>\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ButtonText\r\n","import React, { memo, useRef } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { GoSettings } from 'react-icons/go'\r\n\r\nimport s from './FilterCountrysButtons.module.css'\r\n\r\nimport ButtonText from './ButtonText'\r\nimport { selectRegion } from '../../store/Countrys'\r\n\r\nconst FilterCountrysButtons = () => {\r\n    const buttons = useRef(null)\r\n    const dispatch = useDispatch()\r\n    const regions = ['Asia', 'Africa','Europe', 'Oceania', 'Americas', 'Polar']\r\n\r\n    function openFilters(e) {\r\n        e.target.style.display = 'none'\r\n        buttons.current.style.display = 'block'\r\n    }\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.icon} onClick={openFilters}>\r\n                <GoSettings />\r\n            </div>\r\n            <div className={s.buttons} ref={buttons}>\r\n                {regions.map(r => (\r\n                    <ButtonText\r\n                        key={r}\r\n                        onClick={() => dispatch(selectRegion(r))}\r\n                    >{r}</ButtonText>))\r\n                }\r\n                <ButtonText onClick={() => dispatch(selectRegion(''))}>reset</ButtonText>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(FilterCountrysButtons)\r\n","import { useEffect } from \"react\"\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { fetchDataCountrys } from '../store/Countrys'\r\n\r\nfunction useCountrysDataEffects () {\r\n    const dispatch = useDispatch()\r\n    const data = useSelector(state => state.countrysReducer.data)\r\n\r\n    useEffect(() => {\r\n        // check localStorage && dispatch countrys\r\n        const localStorageCountrys = JSON.parse(localStorage.getItem('countrysReducerData'))\r\n        if(!localStorageCountrys) {\r\n            dispatch(fetchDataCountrys())\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        // save countrys to localeStorrage\r\n        localStorage.setItem('countrysReducerData', JSON.stringify(data))\r\n    }, [data] )\r\n}\r\n\r\nexport default useCountrysDataEffects","import React, {useState, useCallback} from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\nimport { BsSearch } from 'react-icons/bs'\r\n\r\nimport Container from '../components/layout/Container'\r\nimport Section from '../components/layout/Section'\r\n\r\nimport s from './Countrys.module.css'\r\nimport Error from '../components/error/Error'\r\nimport Loader from '../components/error/Loader'\r\nimport Card from '../components/surfaces/Card'\r\nimport Input from '../components/inputs/Input'\r\nimport FilterCountrysButtons from '../components/general/FilterCountrysButtons'\r\nimport useCountrysDataEffects from '../hooks/useCountrysDataEffects'\r\n\r\nconst Countrys = () => {\r\n    const {error, loading} = useSelector(state => state.countrysReducer)\r\n    const [value, setValue] = useState('')\r\n    // filtering data \r\n    const data = useSelector(state => {\r\n        const { region, data } = state.countrysReducer\r\n        if(data) {\r\n            let filteredData = data\r\n            if(region) {\r\n                // filter by button\r\n               filteredData =  data.filter(d => d.region.toLowerCase() === region.toLowerCase())\r\n            }\r\n            // filter by search input\r\n            return  filteredData.filter(({name}) => name.toLowerCase().includes(value.toLowerCase()))\r\n        }\r\n        return data\r\n    })\r\n    // get search value\r\n    \r\n    const onChange = useCallback(event => setValue(event.target.value))\r\n\r\n    useCountrysDataEffects()\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Section>\r\n                    <div className={s.filters}>\r\n                        <FilterCountrysButtons />\r\n                        <Input \r\n                            label=\"Search\"\r\n                            value={value}\r\n                            onChange={onChange}\r\n                        >\r\n                            <BsSearch />\r\n                        </Input>\r\n                    </div>\r\n                    \r\n                    {error ? <Error message={error} /> :\r\n                    loading ? <Loader size={'10rem'} /> :\r\n                    <div className={s.grid}>\r\n                        {data.map((country, i) => (\r\n                            <Link key={i} to={`/country/${country.name}`}>\r\n                                <Card name={country.name} flag={country.flag}></Card>\r\n                            </Link>\r\n                        ))}\r\n                    </div>}\r\n                </Section>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Countrys\r\n","// extracted by mini-css-extract-plugin\nexport default {\"grid\":\"Countrys_grid__Ikc7z\",\"card\":\"Countrys_card__MBLMo\",\"filters\":\"Countrys_filters__NOZQR\"};"],"names":["message","className","s","H1","P","ref","rootMargin","threshold","useState","isIntersecting","setIntersecting","useEffect","r","current","observer","IntersectionObserver","entry","observe","unobserve","Card","name","flag","card","useRef","onScreen","useOnScreen","style","height","offsetWidth","backgroundImage","Loader","memo","Input","label","error","value","onChange","children","text","onFocus","event","fontSize","transform","color","target","border","onBlur","onClick","FilterCountrysButtons","buttons","dispatch","useDispatch","e","display","map","selectRegion","data","useSelector","state","countrysReducer","JSON","parse","localStorage","getItem","fetchDataCountrys","setItem","stringify","loading","setValue","region","filteredData","filter","d","toLowerCase","includes","useCallback","useCountrysDataEffects","Container","Section","Error","size","country","i","to"],"sourceRoot":""}